{"title":"在服务器/github上搭建Hexo博客","slug":"在服务器-github上搭建Hexo博客","date":"2018-07-24T15:07:21.000Z","updated":"2018-07-25T04:26:20.253Z","comments":true,"excerpt":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，更多介绍请访问 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官方网站</a>。</p>\n<p>本篇文章的目的是帮助新手快速建立自己的博客，并发布到github.io或自己的服务器上。</p>\n<h1 id=\"配置本地服务器\"><a href=\"#配置本地服务器\" class=\"headerlink\" title=\"配置本地服务器\"></a>配置本地服务器</h1><p>​    让我们一步一步来。</p>\n<h2 id=\"配置本地环境\"><a href=\"#配置本地环境\" class=\"headerlink\" title=\"配置本地环境\"></a>配置本地环境</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>鉴于绝大多数人本地环境使用的都是Windows，本文章所有本地环境安装方式均为Windows下的。</p>\n<p>访问<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">node.js官方网站</a>，下载推荐版以后安装即可。</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>访问<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官方网站</a>，下载适合自己Windows的版本，安装即可。当然如果你觉得官网下载速度过慢的话，<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">也可以访问这里</a>，这里收录了git国内下载的源。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>git的终端（开始菜单中打开git/git bash），键入以下命令，等待片刻即可安装完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>若命令无法执行，则按照指示安装需要的程序即可。</p>\n<h2 id=\"建立本地站点\"><a href=\"#建立本地站点\" class=\"headerlink\" title=\"建立本地站点\"></a>建立本地站点</h2><h3 id=\"建立本地文件夹\"><a href=\"#建立本地文件夹\" class=\"headerlink\" title=\"建立本地文件夹\"></a>建立本地文件夹</h3><p>建立一个本地文件夹用于存放博客，我使用的是<strong>F:\\blog</strong></p>\n<h3 id=\"初始化本地文件夹\"><a href=\"#初始化本地文件夹\" class=\"headerlink\" title=\"初始化本地文件夹\"></a>初始化本地文件夹</h3><p>由于默认NPM镜像速度太慢，我们可以先切换到淘宝的源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure>\n<p>切换是暂时的，下次如果还要安装npm镜像时，仍需执行这条命令。</p>\n<p>接下来在终端内切换到你所指定的文件夹，输入以下命令，完成初始化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>完成后文件夹目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览本地博客\"><a href=\"#浏览本地博客\" class=\"headerlink\" title=\"浏览本地博客\"></a>浏览本地博客</h3><p>依次键入以下命令，我们就可以在<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 上查看我们博客的样式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改网站配置\"><a href=\"#修改网站配置\" class=\"headerlink\" title=\"修改网站配置\"></a>修改网站配置</h2><h3 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h3><p>可以在 <code>_config.yml</code> 中修改大部份的配置。 </p>\n<p>​    </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td><code>subtitle</code></td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>网站使用的语言</td>\n</tr>\n</tbody>\n</table>\n<p>更多详细设置可以访问 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">配置</a>，Hexo有中文文档，可以非常方便的阅读。</p>\n<p><strong>注意</strong>：修改参数时所有的冒号都必须有空格！</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>访问<a href=\"https://hexo.io/themes/挑选一个你喜欢的主题。点击图片预览，点击主题名称一般能跳转到主题的github界面。\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/挑选一个你喜欢的主题。点击图片预览，点击主题名称一般能跳转到主题的github界面。</a></p>\n<p>拿我现在使用的主题举例，链接是<a href=\"https://github.com/EYHN/hexo-theme-one，一般主题页面都会提供文档，按照文档克隆主题到对应目录即可。\" target=\"_blank\" rel=\"noopener\">https://github.com/EYHN/hexo-theme-one，一般主题页面都会提供文档，按照文档克隆主题到对应目录即可。</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/作者/主题名称 themes/存放主题的文件夹</span><br></pre></td></tr></table></figure>\n<p><strong><em>注意：</em></strong>不少博客都需要安装额外的插件，记得详细阅读文档防止漏装插件。</p>\n<p>主题的设置在/themes/你下载的主题/_config.yml。不同的主题有着不同的配置文件。</p>\n<h1 id=\"部署博客到Github\"><a href=\"#部署博客到Github\" class=\"headerlink\" title=\"部署博客到Github\"></a>部署博客到Github</h1><p>得益于良心的 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a>，我们能够使用Github Pages免费获得一个自己的站点。当然如果你想要拥有自己的域名的话需要自己购买。</p>\n<p>如果你没有Github账号的话，首先你需要一个Github账号。注册完成账号后，我们按照官方文档 <a href=\"https://help.github.com/articles/set-up-git/#setting-up-git\" target=\"_blank\" rel=\"noopener\">Setting up Git</a> ，添加一个名为your_name.github.io 的Repository，注意名字必须是这个。</p>\n<h2 id=\"设置本地Git用户名和邮箱\"><a href=\"#设置本地Git用户名和邮箱\" class=\"headerlink\" title=\"设置本地Git用户名和邮箱\"></a>设置本地Git用户名和邮箱</h2><p>首先我们要设置自己的全局用户名和邮箱。在Git终端中输入下列命令，记得将用户名和邮箱改成自己的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;YOUR NAME&quot;</span><br><span class=\"line\">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure>\n<p>注意这个用户名和邮箱并不是只在博客使用。想了解更多，可以查看<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\"><em>Git教程</em> - 廖雪峰的官方网站</a>，Git非常有用，希望大家都能学习一个。</p>\n<h2 id=\"配置SSH密钥\"><a href=\"#配置SSH密钥\" class=\"headerlink\" title=\"配置SSH密钥\"></a>配置SSH密钥</h2><h3 id=\"生成SSH密钥\"><a href=\"#生成SSH密钥\" class=\"headerlink\" title=\"生成SSH密钥\"></a>生成SSH密钥</h3><p>如果你使用过Git，已经有了密钥，那我们可以直接使用。没有的话我们需要生成一个新的。</p>\n<p>在Git终端输入以下命令，生成秘钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>\n<p>秘钥的设置我们默认就行，一路Enter直到完成。</p>\n<h3 id=\"添加SSH密钥到ssh-agent\"><a href=\"#添加SSH密钥到ssh-agent\" class=\"headerlink\" title=\"添加SSH密钥到ssh-agent\"></a>添加SSH密钥到ssh-agent</h3><p>输入以下命令，开启ssh-agent并添加我们刚刚生成的密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加SSH密钥到GitHub\"><a href=\"#添加SSH密钥到GitHub\" class=\"headerlink\" title=\"添加SSH密钥到GitHub\"></a>添加SSH密钥到GitHub</h3><p>这里可以参考GitHub的官方文档<a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\" rel=\"noopener\">Adding a new SSH key to your GitHub account</a> 。</p>\n<p>可以使用以下命令快捷复制RSA公钥到剪贴板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试SSH连接\"><a href=\"#测试SSH连接\" class=\"headerlink\" title=\"测试SSH连接\"></a>测试SSH连接</h3><p>在正式操作之前，我们可以先测试下本机与GitHub之间的连接。输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>若配置成功，则显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username!You&apos;ve successfully authenticated,but Gitub does not provide shell access</span><br></pre></td></tr></table></figure>\n<p>途中可能会受到密钥指纹认证，同意就行。</p>\n<h2 id=\"部署Hexo博客\"><a href=\"#部署Hexo博客\" class=\"headerlink\" title=\"部署Hexo博客\"></a>部署Hexo博客</h2><h3 id=\"本地设置\"><a href=\"#本地设置\" class=\"headerlink\" title=\"本地设置\"></a>本地设置</h3><p>配置完SSH密钥，我们就可以将博客部署到 GitHub 上了。</p>\n<p>在终端中运行如下命令，安装 hexo-deployer-git 插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>修改_config.yml 中的deploy参数，一般都在文件的最后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/your_name/your_name.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>将your_name换成自己GitHub的用户名即可。</p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>在终端输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>我们的博客就被部署到GitHub上了。</p>\n<p>第一次部署还会要求你输入GitHub的密码，输入即可。</p>\n<p>上传速度因为地区不同网速可能也不同，有时候可能需要花费数分钟才能传完。</p>\n<p>接着访问<a href=\"https://github.com/your_name/your_name.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/your_name/your_name.github.io</a> ，如果推送成功那么我们在这个页面就能看到文件目录。</p>\n<p>点击标题下方菜单栏右侧的<strong>Settings</strong>进入设置界面，向下拉到<strong>GitHub Pages</strong>，在<strong>Launch automatic page generator</strong> 点击<strong>Continue to layouts</strong> ，再点击<strong>Publish page</strong> 即可。</p>\n<p>访问your_name.github.io，就可以看到你的博客内容了。</p>\n<p>博客刚被创建好，可能需要等一会才能访问。当然时间不会太长，要是过了一个小时还是无法访问，可能就是哪里出问题了。</p>\n<h1 id=\"将博客部署到服务器\"><a href=\"#将博客部署到服务器\" class=\"headerlink\" title=\"将博客部署到服务器\"></a>将博客部署到服务器</h1><p>部署到服务器比GitHub要稍复杂些，但GitHub Pages因为服务器在国外，无论是更新博客还是其他人访问速度都有些差强人意，这时候一个国内的、高速稳定的服务器就成了一个不错的选择。</p>\n<h2 id=\"服务器的选购\"><a href=\"#服务器的选购\" class=\"headerlink\" title=\"服务器的选购\"></a>服务器的选购</h2><p>国内的服务器供应商有许多都是有学生特惠的，完成学生认证后可以买到10块一个月、甚至更便宜的特价服务器。大家可以按照自己的需求选购。</p>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><p>购买好服务器后，我们就可以开始配置了。</p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">nginx</a>是是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器，我们搭建博客，需要拿它做Web服务器。</p>\n<p>如果之前没有安装过nginx，推荐使用<a href=\"https://lnmp.org/install.html\" target=\"_blank\" rel=\"noopener\">LNMP一键安装包</a>，大家照着文档安装即可。</p>\n<h3 id=\"安装node-js-1\"><a href=\"#安装node-js-1\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>这里的安装针对的是Ubuntu，如果大家服务器安装的是CentOS或者其他系统，可以使用对应的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -</span><br><span class=\"line\">apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n<p>如果出现安装不上、找不到包等问题，可以升级下apt-get和curl。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt install curl</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建Git账户\"><a href=\"#创建Git账户\" class=\"headerlink\" title=\"创建Git账户\"></a>创建Git账户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser git</span><br></pre></td></tr></table></figure>\n<p>为了安全起见，服务器上的Git操作我们一般都使用Git账户进行。</p>\n<h3 id=\"添加证书登录\"><a href=\"#添加证书登录\" class=\"headerlink\" title=\"添加证书登录\"></a>添加证书登录</h3><p>和GitHub一样，我们需要向服务器添加RSA公钥用于认证登录。只不过这边没有图形界面，需要我们手动添加。</p>\n<p>将之前的公钥保存在<strong>/home/git/.ssh/authorized_keys</strong> 文件中 ，没有这个文件的话我们可以在那里新建一个，输入保存即可。</p>\n<h3 id=\"初始化Git库\"><a href=\"#初始化Git库\" class=\"headerlink\" title=\"初始化Git库\"></a>初始化Git库</h3><p>我们需要初始化一个Git库用于在服务器保存我们的博客。新建一个.git文件夹，然后用命令初始化它，我使用的是/var/repo/blog,git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/repo</span><br><span class=\"line\">cd /var/repo</span><br><span class=\"line\">sudo git init --bare blog.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-Git-Hooks\"><a href=\"#配置-Git-Hooks\" class=\"headerlink\" title=\"配置 Git Hooks\"></a>配置 Git Hooks</h3><p><a href=\"https://git-scm.com/book/zh-tw/v1/Git-%E5%AE%A2%E8%A3%BD%E5%8C%96-Git-Hooks\" target=\"_blank\" rel=\"noopener\">Git Hooks</a>是配置在Git中的脚本，能被特定事件调用。</p>\n<p>在 blog.git/hooks 目录下新建一个 post-receive 文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/repo/blog.git/hooks</span><br></pre></td></tr></table></figure>\n<p>在 post-receive 文件中写入如下内容 ，文件不存在的话可以新建一个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">git --work-tree=/home/www/hexo --git-dir=/var/repo/blog.git checkout -f</span><br></pre></td></tr></table></figure>\n<p>注意，/home/www/hexo是博客静态页面存放的地方。这个脚本的作用就是生成能够被nginx使用的静态页面。当然你也能将静态页面放在其他地方，修改路径就行。</p>\n<p>设置post-receive文件的可执行权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x post-receive</span><br></pre></td></tr></table></figure>\n<p>返回到blog.git的上级目录，将blog.git的拥有用户改为git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R git:git blog.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"禁用-git-用户的-shell-登录权限\"><a href=\"#禁用-git-用户的-shell-登录权限\" class=\"headerlink\" title=\"禁用 git 用户的 shell 登录权限\"></a>禁用 git 用户的 shell 登录权限</h3><p>出于安全考虑，我们要让 git 用户不能通过 shell 登录。可以编辑 /etc/passwd 来实现 ，将passwd文件中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n<p>，就是把bash改为git-shell。</p>\n<h3 id=\"为nginx设置网页目录\"><a href=\"#为nginx设置网页目录\" class=\"headerlink\" title=\"为nginx设置网页目录\"></a>为nginx设置网页目录</h3><p>我们需要将之前Git Hooks生成的目录设置给nginx。默认配置文件在/etc/nginx/sites-enabled下。</p>\n<p>我们打开该目录下的default文件，在server{}中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80 default_server;</span><br><span class=\"line\">\tlisten [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">\troot /home/www/hexo;</span><br><span class=\"line\">\tserver_name www.xxx.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，server位置填你的个人域名。要是还没申请域名或者不打算申请域名，可以以后再填或者不填。</p>\n<h2 id=\"开启服务器80端口\"><a href=\"#开启服务器80端口\" class=\"headerlink\" title=\"开启服务器80端口\"></a>开启服务器80端口</h2><p>有一些服务器供应商是默认不开启80端口的，需要我们手动开启。</p>\n<p>不同供应商的设置方法不同， 这里以阿里云举例，进入控制台，选择云服务器ECS，进入自己服务器的页面，点击 本实例安全组，选择 安全组列表，点击加入安全组，加入80端口即可。详细设定可以访问阿里云官方帮助论坛 <a href=\"https://help.aliyun.com/document_detail/64320.html?spm=5176.11065259.1996646101.searchclickresult.7b4b50a0uME5iC\" target=\"_blank\" rel=\"noopener\">配置公网IP和外部出口</a></p>\n<h2 id=\"部署博客\"><a href=\"#部署博客\" class=\"headerlink\" title=\"部署博客\"></a>部署博客</h2><h3 id=\"配置本地-config-yml\"><a href=\"#配置本地-config-yml\" class=\"headerlink\" title=\"配置本地_config.yml\"></a>配置本地_config.yml</h3><p>和GitHub一样，我们也需要配置deploy。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@your_IP:/var/repo/blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>your_IP替换成你服务器的地址就行。</p>\n<h3 id=\"将本地部署到服务器\"><a href=\"#将本地部署到服务器\" class=\"headerlink\" title=\"将本地部署到服务器\"></a>将本地部署到服务器</h3><ul>\n<li><p>清除缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成静态页面:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将本地静态页面目录部署到云服务器</p>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>至此，我们要做的工作已经全部做完，可以访问自己的博客了。</p>\n","thumbnail":"/img/02.jpg","primarycolor":"blue","categories":[{"name":"博客搭建","path":"api/categories/博客搭建.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"服务器","path":"api/tags/服务器.json"},{"name":"Hexo","path":"api/tags/Hexo.json"}]}